// For more information about secure use of IPC see:
// https://github.com/reZach/secure-electron-template/blob/master/docs/newtoelectron.md

"use strict";

// Use custom V8 snapshot
require("../../src/scripts/v8-snapshot-util.js");

// Core modules
const fs = require("fs");
const {
    glob
} = require("glob");
const {
    join,
    basename
} = require("path");

// Public modules from npm
const {
    contextBridge,
    ipcRenderer,
} = require("electron");
const F95API = require("f95api");
const download = require("simple-image-downloader");
const logger = require("electron-log");
const imagemin = require("imagemin");
const imageminWebp = require("imagemin-webp");
const imageminGifsicle = require("imagemin-gifsicle");

// Modules from file
const ioOps = require("../../src/scripts/io-operations.js");
const GameInfoExtended = require("../../src/scripts/classes/game-info-extended.js");
const ThreadInfo = require("../../src/scripts/classes/thread-info.js");
const networkHelper = require("../../src/scripts/network-helper.js");
const errManager = require("../../src/scripts/error-manger.js");

// Set F95API logger level
F95API.loggerLevel = "warn";

// Array of valid main-to-render channels
const validReceiveChannels = ["window-resized", "window-size"];

// Array of valid render-to-main channels
const validSendChannels = [
    "login-required",
    "exec",
    "message-dialog",
    "open-dialog",
    "cwd",
    "cache-dir",
    "savegames-data-dir",
    "credentials-path",
    "translate",
    "require-messagebox",
    "url-input",
    "update-messagebox",
    "preview-dir",
    "app-version",
    "user-data",
    "window-size",
];

//#region Error management
/**
 * @event
 * Handles errors generated by the application.
 * @param {String} message Error message
 * @param {String} source File where the error occurred
 * @param {number} lineno Line containing the instruction that generated the error
 * @param {number} colno Column containing the statement that generated the error
 * @param {Error} error Application generated error
 */
window.onerror = function (message, source, lineno, colno, error) {
    errManager.manageError("main-preload.js", {
        message: message,
        line: lineno,
        column: colno,
        error: error,
    }, ipcRenderer);
};

/**
 * @event
 * Handles errors generated within non-catched promises.
 * @param {PromiseRejectionEvent} error 
 */
window.onunhandledrejection = function (error) {
    errManager.manageUnhandledError("main-preload.js", error.reason, ipcRenderer);
};
//#endregion Error management

//#region Context Bridge
// Expose protected methods that allow the renderer process to use
// the ipcRenderer without exposing the entire object
contextBridge.exposeInMainWorld("API", {
    /**
     * Directory of the app.js file.
     */
    appDir: __dirname.replace("electron", "").replace("main", ""),
    /**
     * Send an asynchronous request via IPC and wait for a response.
     * @param {String} channel Communication channel
     * @param {Any[]} data Data to send to main process
     * @returns {Promise<Any>} Result from the main process
     */
    invoke: (channel, ...data) => {
        // Send a custom message
        if (validSendChannels.includes(channel)) {
            return ipcRenderer.invoke(channel, data);
        } else logger.warn(`Unauthorized IPC message from 'main-preload.js' through ${channel}: ${data}`);
    },
    /**
     * Send an asynchronous request via IPC.
     * @param {String} channel Communication channel
     * @param {Any[]} data Data to send to main process
     */
    send: (channel, ...data) => {
        // Send a custom message
        if (validSendChannels.includes(channel)) {
            ipcRenderer.send(channel, data);
        } else logger.warn(`Unauthorized IPC message from 'main-preload.js' through ${channel}: ${data}`);
    },
    /**
     * Receive a message from main process via IPC and execute a method.
     * @param {String} channel Communication channel
     * @param {Function} func Method to execute when a message is received
     */
    receive: (channel, func) => {
        // Receive a custom message
        if (validReceiveChannels.includes(channel)) {
            // Deliberately strip event as it includes `sender`
            ipcRenderer.on(channel, (event, ...args) => func(...args));
        }
    },
    /**
     * Join multiple strings into a parsed path for the current OS.
     * @param {String[]} paths Partial paths to join
     * @return {String} Joined path
     */
    join: (...paths) => join(...paths),
    /**
     * Check if an Internet connection is available
     */
    isOnline: () => networkHelper.checkConnection(),
    /**
     * Download an image given a url.
     * @param {String} url URL to download the image from
     * @param {String} dest Path where save the image
     */
    downloadImage: function apiDownloadImage(url, dest) {
        return download.image({
            url: url,
            dest: dest,
        });
    },
    /**
     * Obtain the name of the parent directory of a specified path.
     * @param {String} path
     * @returns {String}
     */
    getDirName: function apiGetDirName(path) {
        return basename(path);
    },
    /**
     * Provide access to logger methods.
     */
    log: logger.functions,
    /**
     * Translate a key into a message in the language specified by the user.
     * @param {String} key Unique key of the message
     * @param {Object} interpolation Dictionary containing the interpolation values
     * @returns {Promise<String>}
     */
    translate: async function apiTranslate(key, interpolation) {
        return ipcRenderer.invoke("translate", key, interpolation);
    },
    /**
     * Change the displayed language in the app.
     * @param {String} iso ISO 639-1 language
     */
    changeLanguage: async function apiChangeLanguage(iso) {
        return ipcRenderer.invoke("change-language", iso);
    },
    /**
     * Get the current app language ISO-code
     */
    currentLanguage: async function apiCurrentLanguage() {
        return ipcRenderer.invoke("current-language");
    },
    /**
     * Convert and compress an image to webp.
     * @param {String} src Path to source
     * @param {String} dest Path to destination folder
     */
    compress: async function compressImage(src, dest) {
        const gifOptions = {
            interlaced: true,
            optimizationLevel: 3,
        };
        const webpOptions = {
            preset: "picture",
            quality: 70,
            method: 5
        };

        // GIF images cannot be converted to WEBP
        const isGIF = src.endsWith(".gif");
        const plugins = isGIF ? [imageminGifsicle(gifOptions)] : [imageminWebp(webpOptions)];

        const options = {
            destination: dest,
            // imagemin cannot handle Window slash but only 
            // Unix backslash, see https://github.com/imagemin/imagemin/issues/352
            glob: false,
            plugins: plugins
        };

        return await imagemin([src], options);
    },
    /**
     * Log an error
     * @param {Error} error Throwed error
     * @param {String} code Unique error code
     * @param {String} name Name of the function that throw the error
     * @param {String} parentName Name of the function containing the error throwing function
     * @param {String} message Custom message to add
     */
    reportError: (error, code, name, parentName, message) => errManager.reportError(error, code, name, parentName, message),
});

// Expose the I/O operations
contextBridge.exposeInMainWorld("IO", {
    /**
     * Read data from a file synchronously.
     * @param {String} path
     * @returns {Any}
     */
    readSync: function ioReadSync(path) {
        return ioOps.readFileSync(path);
    },
    /**
     * Read data from a file asynchronously.
     * @param {String} path
     * @returns {Any}
     */
    read: async function ioRead(path) {
        return ioOps.readFileSync(path);
    },
    /**
     * Write data in a file.
     * @param {String} path
     * @param {Any} value
     */
    write: async function ioWrite(path, value) {
        fs.writeFileSync(path, value);
    },
    /**
     * Filter a direcotry using glob.
     * @param {String} filter Glob filter
     * @param {String} basedir Path to the directory where starting using the filter
     * @returns {Promise<String[]>} List of files matching the filter
     */
    filter: async function ioFilter(filter, basedir) {
        return glob.sync(filter, {
            cwd: basedir,
        });
    },
    /**
     * Remove a single file from disk.
     * @param {String} filename Path to the file
     */
    deleteFile: function ioDeleteFile(filename) {
        fs.unlinkSync(filename);
    },
    /**
     * Remove a dirctory recursively, unlinking also the content.
     * @param {String} dirname Path of the directory
     */
    deleteFolder: async function ioDeleteFolder(dirname) {
        ioOps.deleteFolderRecursive(dirname);
    },
    /**
     * Check if the path exists on disk.
     * @param {String} path
     * @returns {Boolean}
     */
    pathExists: async function ioPathExists(path) {
        return ioOps.exists(path);
    },
    /**
     * Rename a directory.
     * @param {String} currPath Current path of the directory
     * @param {String} newPath Path of the directory with the new name
     */
    renameDir: function ioRenameDir(currPath, newPath) {
        fs.renameSync(currPath, newPath);
    },
    /**
     * Create a directory.
     * @param {String} dirname Path to new dir
     */
    mkdir: async function ioMkdir(dirname) {
        if (!fs.existsSync(dirname))
            fs.mkdirSync(dirname, {
                recursive: true,
            });
    },
    /**
     * Copy a file.
     * @param {String} src Path to origin
     * @param {String} dest Path to new destination
     */
    copy: async function ioCopy(src, dest) {
        fs.copyFileSync(src, dest);
    },
});

// Expose the F95API
contextBridge.exposeInMainWorld("F95", {
    UserData: new F95API.UserData(),
    logged: F95API.isLogged,
    login: (username, password) => F95API.login(username, password),
    getUserData: () => F95API.getUserData(),
    getGameData: (name, searchMod) => F95API.getGameData(name, searchMod),
    getGameDataFromURL: (url) => F95API.getGameDataFromURL(url),
    checkGameUpdates: function checkGameUpdates(data) {
        // Create a new object from the data
        const gameinfo = Object.assign(new GameInfoExtended(), data);

        // This method require GameInfo but GameInfoExtended is extended from GameInfo
        return F95API.checkIfGameHasUpdate(gameinfo);
    },
    recommendGames: async function (limit) {
        return await ipcRenderer.invoke("recommend-games", limit);
    }
});

// Expose the GameInfoExtended custom class
contextBridge.exposeInMainWorld("GIE", {
    gamedata: new GameInfoExtended(),
    convert: function convert(gameinfo) {
        // Create a new object from the data
        return Object.assign(new GameInfoExtended(), gameinfo);
    },
    saves: async function getGameSaves(data) {
        // Create a new object from the data
        const gameinfo = Object.assign(new GameInfoExtended(), data);

        return await gameinfo.getSaves();
    },
    launcher: function getGameLauncher(data) {
        // Create a new object from the data
        const gameinfo = Object.assign(new GameInfoExtended(), data);

        return gameinfo.getGameLauncher();
    }
});

// Expose the ThreadInfo custom class
contextBridge.exposeInMainWorld("TI", {
    threadinfo: new ThreadInfo(),
    convert: function convert(gameinfo) {
        const threadInfo = new ThreadInfo();
        threadInfo.fromGameInfo(gameinfo);

        return threadInfo;
    },
});

// Expose methods for error logging
contextBridge.exposeInMainWorld("EM", {
    onerror: (scriptname, data) => errManager.manageError(scriptname, data, ipcRenderer),
    unhandlederror: (scriptname, reason) => errManager.manageUnhandledError(scriptname, reason, ipcRenderer)
});

// Wrapper around the Game DB operations
contextBridge.exposeInMainWorld("GameDB", {
    insert: (gameinfo) => ipcRenderer.invoke("database-operation", "game", "insert", {
        data: gameinfo
    }),
    delete: (deleteQuery) => ipcRenderer.invoke("database-operation", "game", "delete", {
        query: deleteQuery
    }),
    read: (id) => ipcRenderer.invoke("database-operation", "game", "read", {
        id: id
    }),
    write: (gameinfo) => ipcRenderer.invoke("database-operation", "game", "write", {
        data: gameinfo
    }),
    search: (searchQuery, sortQuery, index, size, limit) => ipcRenderer.invoke("database-operation", "game", "search", {
        query: searchQuery,
        pagination: {
            index: index,
            size: size,
            limit: limit
        },
        sortQuery: sortQuery ? sortQuery : {}
    }),
    count: (query) => ipcRenderer.invoke("database-operation", "game", "count", {
        query: query
    }),
});

// Wrapper around the Thread DB operations
contextBridge.exposeInMainWorld("ThreadDB", {
    insert: (threadinfo) => ipcRenderer.invoke("database-operation", "thread", "insert", {
        data: threadinfo
    }),
    delete: (deleteQuery) => ipcRenderer.invoke("database-operation", "thread", "delete", {
        query: deleteQuery
    }),
    write: (threadinfo) => ipcRenderer.invoke("database-operation", "thread", "write", {
        data: threadinfo
    }),
    search: (searchQuery, sortQuery, index, size, limit) => ipcRenderer.invoke("database-operation", "thread", "search", {
        query: searchQuery,
        pagination: {
            index: index,
            size: size,
            limit: limit
        },
        sortQuery: sortQuery ? sortQuery : {}
    }),
});

// Wrapper around the Update DB operations
contextBridge.exposeInMainWorld("UpdateDB", {
    insert: (gameinfo) => ipcRenderer.invoke("database-operation", "update", "insert", {
        data: gameinfo
    }),
    delete: (deleteQuery) => ipcRenderer.invoke("database-operation", "update", "delete", {
        query: deleteQuery
    }),
    search: (searchQuery, sortQuery, index, size, limit) => ipcRenderer.invoke("database-operation", "update", "search", {
        query: searchQuery,
        pagination: {
            index: index,
            size: size,
            limit: limit
        },
        sortQuery: sortQuery ? sortQuery : {}
    }),
});
//#endregion Context Bridge
